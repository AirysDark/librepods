name: BlueLibre AI Autobuilder ? Android (robust)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps for autobuilder
        run: pip install requests

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Install Android SDK components
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # Provide system Gradle in case we don't have a wrapper
      - name: Set up Gradle (fallback)
        uses: gradle/gradle-build-action@v2

      # Build + wrapper detection + logging, and CAPTURE EXIT CODE
      - name: Build (capture)
        id: build
        shell: bash
        run: |
          set -euxo pipefail

          # 1) Locate wrapper (handles your android/gardle layout)
          CANDIDATES=("android/gardle/gradlew" "android/gradlew" "gradlew")
          WRAP=""
          for c in "${CANDIDATES[@]}"; do
            if [ -f "$c" ]; then WRAP="$c"; break; fi
          done

          # 2) Decide build command
          if [ -n "$WRAP" ]; then
            chmod +x "$WRAP"
            WORKDIR="$(dirname "$WRAP")"
            [ "$WORKDIR" = "." ] || cd "$WORKDIR"
            CMD="./$(basename "$WRAP") assembleDebug --stacktrace"
          else
            echo "No wrapper found; using system Gradle via gradle/gradle-build-action"
            CMD='gradle -p android assembleDebug --stacktrace'
          fi

          echo "BUILD_CMD=$CMD" >> "$GITHUB_OUTPUT"

          # 3) Run build and capture exit code, always write build.log at repo root
          set +e
          bash -lc "$CMD" | tee build.log
          EXIT=$?
          set -e
          echo "EXIT_CODE=$EXIT" >> "$GITHUB_OUTPUT"
          [ -f build.log ] || echo "(no build output captured)" > build.log

          # Do not fail the step so the next steps can run
          exit 0
        continue-on-error: true

      # Run AI fixer if the build EXIT_CODE != 0 (even if the step ?succeeded?)
      - name: Attempt AI auto-fix with OpenAI
        if: always() && steps.build.outputs.EXIT_CODE != '0'
        env:
          PROVIDER: openai
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
          AI_BUILDER_ATTEMPTS: "2"
          BUILD_CMD: ${{ steps.build.outputs.BUILD_CMD }}
        run: python3 tools/ai_autobuilder.py || true

      - name: Push branch with fixes (if any)
        if: always() && steps.build.outputs.EXIT_CODE != '0'
        run: |
          set -eux
          if git diff --quiet HEAD; then
            echo "No changes to commit."
            exit 0
          fi
          BRANCH="fix/android-ai-autobuilder-${{ github.run_id }}"
          git config user.name "ai-autobuilder[bot]"
          git config user.email "ai-autobuilder@users.noreply.github.com"
          git switch -c "$BRANCH"
          git add -A
          git commit -m "AI autobuilder: Android fixes" || true
          git push --set-upstream origin "$BRANCH" || true

      - name: Upload APKs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: "**/build/outputs/**/*.apk"
          if-no-files-found: ignore
